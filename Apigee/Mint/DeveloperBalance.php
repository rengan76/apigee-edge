<?php
/**
 * User: isaias
 */

namespace Apigee\Mint;

use Apigee\Mint\DataStructures\SupportedCurrency;
use Apigee\Mint\DataStructures\DeveloperBalanceTransaction;
use Apigee\Util\OrgConfig;

class DeveloperBalance extends Base\BaseObject
{

    /**
     * @var DataStructures\SupportedCurrency
     */
    private $supportedCurrency;

    /**
     * @var float
     */
    private $usage;

    /**
     * @var float
     */
    private $amount;

    /**
     * @var string
     */
    private $txReference;

    /**
     * @var string
     */
    private $gatewayTxReference;

    /**
     * @var float
     */
    private $replenishAmount;

    /**
     * @var float
     */
    private $recurringAmount;

    /**
     * @var bool
     */
    private $isRecurring;

    /**
     * @var string
     */
    private $providerId;

    /**
     * @var string
     */
    private $dev;

    /**
     * @var bool
     */
    private $chargePerUsage;

    /**
     * @var double
     */
    private $approxTaxRate;

    /**
     * This is balance (prepaid) or credit limit (postpaid)
     * @var double
     */
    private $currentBalance;

    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $month;

    /**
     * @var double
     */
    private $previousBalance;

    /**
     * @var double
     */
    private $tax;

    /**
     * @var double
     */
    private $topups;

    /**
     * @var int
     */
    private $year;

    /**
     * @var string
     */
    private $cachedBaseUrl;

    private $transaction;

    /**
     * @param string $dev
     * @param OrgConfig $config
     */
    public function __construct($dev, OrgConfig $config)
    {
        $base_url = '/mint/organizations/'
            . $config->orgName
            . '/developers/'
            . rawurlencode($dev)
            . '/developer-balances';
        $this->dev = $dev;
        $this->init($config, $base_url);
        $this->wrapperTag = 'developerBalance';
        $this->idField = 'id';
        $this->idIsAutogenerated = false;
        $this->initValues();
    }

    /**
     * Creates a blank instance of __CLASS__ with the same constructor parameters
     * as the class that is doing the instantiation.
     *
     * @return \Apigee\Mint\DeveloperBalance
     */
    public function instantiateNew()
    {
        return new DeveloperBalance($this->dev, $this->getConfig());
    }

    /**
     * Given an associative array from the raw JSON response, populates the
     * object with that data.
     *
     * @param array $data
     * @param bool $reset
     *
     * @return void
     */
    public function loadFromRawData($data, $reset = false)
    {
        if ($reset) {
            $this->initValues();
        }
        $excluded_properties = array('supportedCurrency', 'transaction');
        foreach (array_keys($data) as $property) {
            if (in_array($property, $excluded_properties)) {
                continue;
            }

            // Form the setter method name to invoke setter method.
            $setter_method = 'set' . ucfirst($property);

            if (method_exists($this, $setter_method)) {
                $this->$setter_method($data[$property]);
            } else {
                self::$logger->notice('No setter method was found for property "' . $property . '"');
            }
        }
        if (isset($data['supportedCurrency'])) {
            $this->supportedCurrency = new SupportedCurrency($data['supportedCurrency'], $this->config);
        }
        if (isset($data['transaction'])) {
            $this->transaction = new DeveloperBalanceTransaction($data['transaction']);
        }
    }

    /**
     * Returns all member variables to their default values.
     *
     * @return mixed
     */
    protected function initValues()
    {
        $this->supportedCurrency = null;
        $this->usage = 0;
        $this->amount = 0;
        $this->txReference = null;
        $this->gatewayTxReference = null;
        $this->replenishAmount = 0;
        $this->recurringAmount = 0;
        $this->isRecurring = false;
        $this->providerId = false;
        $this->chargePerUsage = false;
        $this->transaction = new DeveloperBalanceTransaction();

        // @TODO Remove
        $this->providerId = 'worldpay';
    }

    /**
     * @return float
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * @return string
     */
    public function getGatewayTxReference()
    {
        return $this->gatewayTxReference;
    }

    /**
     * @return boolean
     */
    public function isRecurring()
    {
        return $this->isRecurring;
    }

    /**
     * @return float
     */
    public function getRecurringAmount()
    {
        return $this->recurringAmount;
    }

    /**
     * @return string
     */
    public function getProviderId()
    {
        return $this->providerId;
    }

    /**
     * @return float
     */
    public function getReplenishAmount()
    {
        return $this->replenishAmount;
    }

    /**
     * @return \Apigee\Mint\DataStructures\SupportedCurrency
     */
    public function getSupportedCurrency()
    {
        return $this->supportedCurrency;
    }

    /**
     * @return string
     */
    public function getTxReference()
    {
        return $this->txReference;
    }

    /**
     * @return float
     */
    public function getUsage()
    {
        return $this->usage;
    }

    /**
     * @param float $amount
     */
    public function setAmount($amount)
    {
        $this->amount = $amount;
    }

    /**
     * @param string $gatewayTxReference
     */
    public function setGatewayTxReference($gatewayTxReference)
    {
        $this->gatewayTxReference = $gatewayTxReference;
    }

    /**
     * @param boolean $isRecurring
     */
    public function setIsRecurring($isRecurring)
    {
        $this->isRecurring = $isRecurring;
    }

    /**
     * @param string $providerId
     */
    public function setProviderId($providerId)
    {
        $this->providerId = $providerId;
    }

    /**
     * @param float $recurringAmount
     */
    public function setRecurringAmount($recurringAmount)
    {
        $this->recurringAmount = $recurringAmount;
    }

    /**
     * @param float $replenishAmount
     */
    public function setReplenishAmount($replenishAmount)
    {
        $this->replenishAmount = $replenishAmount;
    }

    /**
     * @param \Apigee\Mint\DataStructures\SupportedCurrency $supportedCurrency
     */
    public function setSupportedCurrency($supportedCurrency)
    {
        $this->supportedCurrency = $supportedCurrency;
    }

    /**
     * @param string $txReference
     */
    public function setTxReference($txReference)
    {
        $this->txReference = $txReference;
    }

    /**
     * @param float $usage
     */
    public function setUsage($usage)
    {
        $this->usage = $usage;
    }

    /**
     * @param bool $chargePerUsage
     */
    public function setChargePerUsage($chargePerUsage)
    {
        $this->chargePerUsage = $chargePerUsage;
    }

    /**
     * @return bool
     */
    public function isChargePerUsage()
    {
        return $this->chargePerUsage;
    }

    /**
     * @param DeveloperBalanceTransaction $transaction
     */
    public function setTransaction(DeveloperBalanceTransaction $transaction)
    {
        $this->transaction = $transaction;
    }

    /**
     * @return DeveloperBalanceTransaction
     */
    public function getTransaction()
    {
        return $this->transaction;
    }

    /**
     * @param $currencyId
     *
     * @return \Apigee\Mint\DeveloperBalance
     */
    public function getByCurrencyId($currencyId)
    {
        $options = array(
            'query' => array(
                'currencyId' => $currencyId,
            )
        );
        $this->get(null, 'application/json', array(), $options);
        $developerBalanceAPIObj = null;
        foreach ($this->responseObj['developerBalance'] as $developerBalance) {
            $developerBalanceAPIObj = $this->instantiateNew();
            $developerBalanceAPIObj->loadFromRawData($developerBalance);
        }
        return $developerBalanceAPIObj;
    }

    /**
     * Update recurring setup
     *
     * @param $supportedCurrencyId
     * @param $recurring
     * @param $replenishAmt
     * @param $recurringAmt
     * @param $provider
     */
    public function updateRecurringSetup($supportedCurrencyId, $recurring, $replenishAmt, $recurringAmt, $provider)
    {
        $options = array(
            'query' => array(
                'supportedCurrencyId' => strtolower($supportedCurrencyId),
            ),
        );

        $payload = array('providerId' => $provider);
        if (!$recurring['isRecurring'] && !$recurring['chargePerUsage']) {
            $payload += array(
                'recurringAmount' => 2,
                'replenishAmount' => 1,
            );
        } else {
            $payload += array(
                'recurringAmount' => $recurringAmt,
                'replenishAmount' => $replenishAmt,
            );
        }

        $payload += $recurring;

        $this->post(
            'recurring-setup',
            $payload,
            'application/json; charset=utf-8',
            'application/json; charset=utf-8',
            array(),
            $options
        );
    }

    /**
     * @param float $approxTaxRate
     */
    public function setApproxTaxRate($approxTaxRate)
    {
        $this->approxTaxRate = $approxTaxRate;
    }

    /**
     * @return float
     */
    public function getApproxTaxRate()
    {
        return $this->approxTaxRate;
    }

    /**
     * @param mixed $cachedBaseUrl
     */
    public function setCachedBaseUrl($cachedBaseUrl)
    {
        $this->cachedBaseUrl = $cachedBaseUrl;
    }

    /**
     * @return mixed
     */
    public function getCachedBaseUrl()
    {
        return $this->cachedBaseUrl;
    }

    /**
     * @param float $currentBalance
     */
    public function setCurrentBalance($currentBalance)
    {
        $this->currentBalance = $currentBalance;
    }

    /**
     * @return float
     */
    public function getCurrentBalance()
    {
        return $this->currentBalance;
    }

    /**
     * @param string $dev
     */
    public function setDev($dev)
    {
        $this->dev = $dev;
    }

    /**
     * @return string
     */
    public function getDev()
    {
        return $this->dev;
    }

    /**
     * @param string $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @param string $month
     */
    public function setMonth($month)
    {
        $this->month = $month;
    }

    /**
     * @return string
     */
    public function getMonth()
    {
        return $this->month;
    }

    /**
     * @param float $previousBalance
     */
    public function setPreviousBalance($previousBalance)
    {
        $this->previousBalance = $previousBalance;
    }

    /**
     * @return float
     */
    public function getPreviousBalance()
    {
        return $this->previousBalance;
    }

    /**
     * @param float $tax
     */
    public function setTax($tax)
    {
        $this->tax = $tax;
    }

    /**
     * @return float
     */
    public function getTax()
    {
        return $this->tax;
    }

    /**
     * @param float $topups
     */
    public function setTopups($topups)
    {
        $this->topups = $topups;
    }

    /**
     * @return float
     */
    public function getTopups()
    {
        return $this->topups;
    }

    /**
     * @param int $year
     */
    public function setYear($year)
    {
        $this->year = $year;
    }

    /**
     * @return int
     */
    public function getYear()
    {
        return $this->year;
    }

    /**
     * Returns a JSON representation of the object.
     *
     * @return mixed
     */
    public function __toString()
    {
        // TODO: Implement __toString() method.
    }
}
