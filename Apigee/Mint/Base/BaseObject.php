<?php
/**
 * @file
 * Superclass of all independent API objects in the Mint hierarchy.
 *
 * @author djohnson
 * @since 10 May 2013
 */

namespace Apigee\Mint\Base;

use \Apigee\Exceptions\ParameterException;
use \Apigee\Exceptions\ResponseException;
use \Apigee\Util\APIObject;

/**
 * Class BaseObject
 *
 * Descendants of this class should define base_url, wrapper_tag and
 * id_field in their constructor.
 *
 * @package Apigee\Mint\Base
 */
abstract class BaseObject extends APIObject
{

    /**
     * @var string
     * In collections, this is the name of the parent object in the collection.
     * It is usually a camelCase version of the object name.
     */
    protected $wrapperTag;

    /**
     * @var string
     * The name of the field that provides the primary key of the object.
     */
    protected $idField;

    /**
     * @var bool
     * If the $id_field can be autogenerated, this should be TRUE, else FALSE.
     */
    protected $idIsAutogenerated = true;

    /**
     * Creates a blank instance of __CLASS__ with the same constructor parameters
     * as the class that is doing the instantiation.
     *
     * @return \Apigee\Mint\Base\BaseObject
     */
    abstract public function instantiateNew();

    /**
     * Given an associative array from the raw JSON response, populates the
     * object with that data.
     *
     * @param array $data
     * @param bool $reset
     * @return void
     */
    abstract public function loadFromRawData($data, $reset = false);

    /**
     * Returns all member variables to their default values.
     *
     * @return void
     */
    abstract protected function initValues();

    /**
     * Returns a JSON representation of the object.
     *
     * @return string
     */
    abstract public function __toString();

    /**
     * Returns a listing of this class of objects.
     *
     * @param null|int $page_num
     * @param int $page_size
     * @return array
     */
    public function getList($page_num = null, $page_size = 20)
    {
        // When page_num is NULL, fetch all
        $query = array();
        $page_num = intval($page_num);
        $page_size = intval($page_size);
        if ($page_num < 1 || $page_size < 1) {
            $query['all'] = 'true';
        } else {
            $query['page'] = $page_num;
            $query['size'] = $page_size;
        }
        $url = '?' . http_build_query($query);
        $this->get($url);
        $response = $this->responseObj;

        $return_objects = array();

        foreach ($response[$this->wrapperTag] as $response_data) {
            $obj = $this->instantiateNew();
            $obj->loadFromRawData($response_data);
            $return_objects[] = $obj;
        }
        return $return_objects;
    }

    /**
     * Calls the API to populate the object.
     *
     * @param null|string $id
     * @throws \Apigee\Exceptions\ParameterException
     */
    public function load($id = null)
    {
        if (!isset($id)) {
            $id = $this->{$this->idField};
        }
        if (!isset($id)) {
            throw new ParameterException('No object identifier was specified.');
        }

        $this->initValues();

        $url = rawurlencode($id);
        $this->get($url);
        $response = $this->responseObj;
        $this->loadFromRawData($response);
    }

    /**
     * Calls the API to save the object.
     *
     * If you know for certain that you are creating a new object, you should
     * pass $save_method of 'create'.  If you know for certain that you are
     * updating an existing object, you should pass $save_method of 'update'.
     * If you pass 'auto', it will try to create, and failing that, will try
     * to update an existing one. This is more robust but less efficient.
     *
     * @param string $save_method
     * @throws \Apigee\Exceptions\ResponseException|\Exception
     * @throws \Apigee\Exceptions\ParameterException
     */
    public function save($save_method = 'auto')
    {
        if ($save_method != 'auto' && $save_method != 'create' && $save_method != 'update') {
            throw new ParameterException('Valid save methods are create, update or auto.');
        }

        $reflect = new \ReflectionClass($this);
        $id_field_getter = 'get' . ucfirst($this->idField);
        if ($reflect->hasMethod($id_field_getter)) {
            $id_field_value = $this->{$id_field_getter}();
            if (!isset($id_field_value)) {
                // If the ID for this object type is auto-generated, and the ID field
                // itself is empty, force an object create.
                if ($this->idIsAutogenerated && $save_method != 'update') {
                    $save_method = 'create';
                } else {
                    // Under these circumstances,
                    throw new ParameterException(sprintf('No object identifier (%s) was specified.', $this->idField));
                }
            }
        } else {
            throw new \Exception(sprintf("Unable to access private %s property's value."));
        }

        $payload = (string)$this;

        if ($save_method == 'auto' || $save_method == 'create') {
            try {
                $this->post(null, $payload);
                $response = $this->responseObj;
                // Reload object from response data in case any auto-generated fields
                // have been updated.
                $this->loadFromRawData($response);
            } catch (ResponseException $e) {
                if ($save_method == 'auto' && $e->getCode() == 409) {
                    // If we tried to create, and the object already exists, try updating
                    // via PUT instead.
                    $this->save('update');
                } else {
                    throw $e;
                }
            }
        } else {
            $url = rawurlencode($this->{$id_field_getter}());
            $this->put($url, $payload);
            $response = $this->responseObj;
            // Reload object from response data in case any auto-generated fields
            // have been updated.
            $this->loadFromRawData($response);
        }
    }

    /**
     * Calls the API to delete the object.
     *
     * @throws \Apigee\Exceptions\ParameterException
     */
    public function delete()
    {
        if (!isset($this->id_field)) {
            throw new ParameterException('No object identifier was specified.');
        }
        $url = rawurlencode($this->{$this->id_field});
        // Will throw a ResponseException in case we get a non-200 response.
        $this->httpDelete($url);
        // Presuming delete was successful, erase any org values here.
        $this->initValues();
    }

    protected function validateUri($url)
    {
        // Validate URL and make sure it is either http or https (no file:/// or
        // ftp:// allowed.)
        $uri = @parse_url($url);
        if (!$uri || ($uri['scheme'] != 'http' && $uri['scheme'] != 'https')) {
            return false;
        }
        return true;
    }
}
